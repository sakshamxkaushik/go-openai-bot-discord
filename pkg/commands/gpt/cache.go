package gpt

import (
	lru "github.com/hashicorp/golang-lru/v2"
	"github.com/sashabaranov/go-openai"
)

// The IgnoredChannelsCache struct is a map that is used to store ignored channels for the bot. The keys of the map are strings representing channel IDs, 
// and the values are empty structs. This struct is  used to keep track of channels that the bot should ignore when processing messages.
type IgnoredChannelsCache map[string]struct{}

// The MessagesCache struct is a cache that is used to store messages generated by the OpenAI API. The cache is implemented using the golang-lru library. 
// The cache is a map that maps strings to *MessagesCacheData pointers. 
type MessagesCache struct {
	*lru.Cache[string, *MessagesCacheData]
}

// The MessagesCacheData struct contains information about the messages generated by the OpenAI API, 
// including the messages themselves, the model used to generate the messages, and the number of tokens used to generate the messages.
type MessagesCacheData struct {
	Messages      []openai.ChatCompletionMessage
	SystemMessage *openai.ChatCompletionMessage
	Model         string
	Temperature   *float32
	TokenCount    int
}


// The NewMessagesCache function is used to create a new MessagesCache struct with a specified size. The function takes an int representing the 
// size of the cache as an argument and returns a pointer to a new MessagesCache struct. The function uses the lru.New function from the golang-lru 
// library to create a new LRU cache with the specified size. If an error occurs during the creation of the cache, the function returns nil and the error.
func NewMessagesCache(size int) (*MessagesCache, error) {
	lruCache, err := lru.New[string, *MessagesCacheData](size)
	if err != nil {
		return nil, err
	}

	return &MessagesCache{
		Cache: lruCache,
	}, nil
}
